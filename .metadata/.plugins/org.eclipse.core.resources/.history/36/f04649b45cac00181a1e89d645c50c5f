package com.it15136466.IT15136466.controller;

import java.util.HashMap;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.it15136466.IT15136466.model.Account;
import com.it15136466.IT15136466.model.User;

@Controller
public class CookieController {

	HashMap<String, String> cookieStore = new HashMap<>();

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String index() {
		return "index";
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String submit(@Valid @ModelAttribute("User") User user, BindingResult result, Model model,
			HttpServletResponse response, HttpServletRequest request) {

		if (user.getUsername().equals("admin") && user.getPassword().equals("admin")) {
			if (result.hasErrors()) {
				return "error";
			}

			String ssid_value = generateRamdomValue();

			Cookie c1 = new Cookie("ssid", ssid_value);
			c1.setMaxAge(600 * 600); // 1 hour
			c1.setHttpOnly(true);
			c1.setSecure(false);
			response.addCookie(c1);
			cookieStore.put("ssid", ssid_value);

			Cookie c2 = new Cookie("csrf", generateRamdomValue());
			c2.setMaxAge(600 * 600); // 1 hour
			c2.setHttpOnly(false);
			c2.setSecure(false);
			response.addCookie(c2);

			return "UserView";
		} else {
			return "error";
		}

	}

	@RequestMapping(value = "/doublecookie", method = RequestMethod.POST)
	public String transferMoneyDouble(@Valid @ModelAttribute("Account") Account account, BindingResult result,
			Model model, HttpServletResponse response, HttpServletRequest request) {

		String r_c1 = null, r_csrf = null;
		Cookie[] cookies = request.getCookies();

		if (cookies != null) {
			for (Cookie cookie : cookies) {
				System.out.println("called " + cookie.getName());

				if (cookie.getName().equals("ssid")) {
					r_c1 = cookie.getValue();
				} else if (cookie.getName().equals("csrf")) {
					r_csrf = cookie.getValue();
				}

			}
		}

		if (r_c1.equals(cookieStore.get("ssid")) && account.getCsrf().equals(r_csrf)) {

			model.addAttribute("msg", "your money transfer is successfull");
			return "UserView";
		} else {

			return "error";
		}

	}

	public String generateRamdomValue() {
		Random rand = new Random();
		int myRandomNumber = rand.nextInt(0x10) + 0x10; // Generates a random
														// number between 0x10
														// and 0x20
		String result = Integer.toHexString(myRandomNumber); // Random hex
																// number in
																// result
		return result;
	}

}
